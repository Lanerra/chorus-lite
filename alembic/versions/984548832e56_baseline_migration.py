# alembic/versions/984548832e56_baseline_migration.py
"""Baseline migration

Revision ID: 984548832e56
Revises: 
Create Date: 2025-08-11 07:48:16.946943

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision: str = '984548832e56'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chapter',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('order_index', sa.Integer(), nullable=True),
    sa.Column('structure_notes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_profile',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('full_name', sa.Text(), nullable=True),
    sa.Column('aliases', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('gender', sa.Text(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('death_date', sa.Date(), nullable=True),
    sa.Column('species', sa.Text(), nullable=True),
    sa.Column('role', sa.Text(), nullable=True),
    sa.Column('rank', sa.Text(), nullable=True),
    sa.Column('backstory', sa.Text(), nullable=True),
    sa.Column('beliefs', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('desires', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('intentions', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('motivations', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('fatal_flaw', sa.Text(), nullable=True),
    sa.Column('arc', sa.Text(), nullable=True),
    sa.Column('voice', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('concept',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('logline', sa.Text(), nullable=False),
    sa.Column('theme', sa.Text(), nullable=True),
    sa.Column('conflict', sa.Text(), nullable=True),
    sa.Column('protagonist', sa.Text(), nullable=True),
    sa.Column('hook', sa.Text(), nullable=True),
    sa.Column('genre', sa.Text(), nullable=True),
    sa.Column('tone', sa.Text(), nullable=True),
    sa.Column('setting', sa.Text(), nullable=True),
    sa.Column('mood', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('configuration',
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('event',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('item',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('location',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('lore',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('key', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )
    op.create_table('organization',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('task_queue',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('dependencies', postgresql.ARRAY(sa.UUID()), nullable=False),
    sa.Column('assigned_to', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('world_anvil',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.Text(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('location_type', sa.Text(), nullable=True),
    sa.Column('ruling_power', sa.Text(), nullable=True),
    sa.Column('cultural_notes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('character_location',
    sa.Column('character_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['character_profile.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['world_anvil.id'], ),
    sa.PrimaryKeyConstraint('character_id', 'location_id')
    )
    op.create_table('character_relationship',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('from_character', sa.UUID(), nullable=False),
    sa.Column('to_character', sa.UUID(), nullable=False),
    sa.Column('relationship_type', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('strength', sa.Float(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['from_character'], ['character_profile.id'], ),
    sa.ForeignKeyConstraint(['to_character'], ['character_profile.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scene',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('embedding', Vector(dim=768), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('scene_number', sa.Integer(), nullable=True),
    sa.Column('setting', sa.Text(), nullable=True),
    sa.Column('characters', postgresql.ARRAY(sa.UUID()), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.Column('chapter_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['world_anvil.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scene_status'), 'scene', ['status'], unique=False)
    op.create_table('story',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('concept_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['concept_id'], ['concept.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('approval_log',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('scene_id', sa.UUID(), nullable=False),
    sa.Column('reviewer', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('feedback', postgresql.ARRAY(sa.Text()), nullable=False),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('continuity_feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('scene_id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('story_feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('scene_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scene.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('story_feedback')
    op.drop_table('continuity_feedback')
    op.drop_table('approval_log')
    op.drop_table('story')
    op.drop_index(op.f('ix_scene_status'), table_name='scene')
    op.drop_table('scene')
    op.drop_table('character_relationship')
    op.drop_table('character_location')
    op.drop_table('world_anvil')
    op.drop_table('task_queue')
    op.drop_table('organization')
    op.drop_table('lore')
    op.drop_table('location')
    op.drop_table('item')
    op.drop_table('event')
    op.drop_table('configuration')
    op.drop_table('concept')
    op.drop_table('character_profile')
    op.drop_table('chapter')
    # ### end Alembic commands ###
